This is my idea outline for this project.
Some of these are things I saw online and thought might be applicable.
I also use this as a document to note down things I need to research and general planning.

######################### Project Outline #########################
Create simulations of plays using Pygame
- Pass
- Hockey Pass
- Steal
- Screens
- Pick and roll
- Delay action
Will be adding more plays

Object Detections
- Create a mask of the basketball court image
- Using HoughCircles detect the circles

Image Segmentation
- YOLOv9c
https://www.youtube.com/watch?v=ZF7EAodHn1U&t=219s

Object Tracking
- Deep Sort (helps considering occuluion)
--> Create custom model?
Modify encode model in yolov8-deepsort.py
Instead of using 'model_data/mars-small128.pb'
Use something simpler that detects geometric data
Look into custom CNN that is built specifically for circles

- Initially was 2.86%

--> YOLOv9 implemented -- Try out YOLOV10

Hyperparameter Tuning
- Adam optimizer
- Grid Search

Neural Networks
- C3D
- LSTM 
- TCN

Model Efficiency/Compression
- Quantization
- Pruning
- Efficient Interface? Research more
- Neural Network on every other frame or every 5 frames?
- Feature Reduction: PCA / anything else?
- Ensemble methods

Augmentations
- geometric: rotate + flipping + pyramid scale + translation + cropping (bottom part of image) 
- noise injection
- normalization
- blur/distortion
- cutmix
- color space transformation

Optimize learning rate
- Cosine 
- /10 after every 20 epochs

Features to be extracted
- basketball + player - coordinate, color, velocity, acceleration
- distance between circles
- time spent in specific zones of the court
- player in posession of the ball 

Data Processing
- Parralel/Batch processing?
- Distributed processing
- GPU accelerated libraries
- Spatial Databases

Simulation Optimization
- Change video dimensions???
- Change video resolution to 240p?
- Consider switching to 60/higher FPS

######################### Bugs #########################
1. Resolve issue moving ball to another side of the player
- In the 'Basketball Game Simulation' file
--> Refer to (https://github.com/AbhishekR3/Basketball-PlayAnalysis/blob/2b7e567e77899a0dd13cdb5800985b20e8852113/Basketball_Game_Simulation.py)

2. Update CI testing so both python files are executed in the same GIT Action

######################### Optimization #########################
1. Others player move away from current_player if too close

2. Object Detection color
- Set the center and outer circle color in the first frame
- Figure out the best color

######################### Notes #########################
1. Deep Sort Paper
- Combinations of big/small objects doesnt work well. 
Think about making the objects closer in size? It has a scale threshold too

- Scale threshold (important) + reduction threshold

- Current frame-previous frame matching search takes the longest time to process
So you should reduce the dimensions
-> Dimensions
- Basketball - color + x_coordinate + y_coordinates - x1
- Player - color + x_coordinate + y_coordinates - x10
-> Algorithms
- PCA (For efficiency)
- t-SNE (For Visualization)
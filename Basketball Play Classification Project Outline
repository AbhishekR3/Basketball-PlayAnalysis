This is my idea outline for this project.
Some of these are things I saw online and thought might be applicable.
I also use this as a document to note down things I need to research and thoughts.

######################### Project Outline #########################
Create simulations of plays using Pygame
- Pass
- Steal
- Screens
- Pick and roll
- Delay action
Will be adding more plays

Object Detections
- Create a mask of the basketball court image
- Using HoughCircles detect the circles

Object Tracking
- Deep Sort (helps considering occuluion)

3D CNN model (?Temporal Action Localization?)
- C3D
- LSTM 
- RNN - many to many based model

Augmentations
- randomly sampling a pyramid scale



Optimizers
- Adam (Adaptive Moment Estimation)
- SGD + Momentum
- Nesterov Accelerated Gradient (NAG)
- Adagrad

Optimize learning rate
- Cosine 
- /10 after every 20 epochs

######################### Optimization #########################
1. Optimize simulation
--> Consider switching to 60 / or higher FPS
--> Process object detection/tracking on all frames
--> Perform LSTM and C3D models on every other frame or every 5 frames?
--> Change video resolution to 240p
--> Change video dimensions ???

2. Resolve issue moving ball to another side of the player
- In the 'Basketball Game Simulation' file
--> Refer to (https://github.com/AbhishekR3/Basketball-PlayAnalysis/blob/2b7e567e77899a0dd13cdb5800985b20e8852113/Basketball_Game_Simulation.py)


3. Others player move away from current_player if too close


4. For CourtVision based testing
- Background Subtraction
--> MOG2
--> KNN
--> PCA

5. Size of the players, ball, ball detection border and center


6. Deep Sort Paper
- Combinations of big/small objects doesnt work well. 
Think about making the objects closer in size. 

- Scale threshold (important) + reduction threshold

- Current frame-previous frame matching search takes the longest time to process
So you should reduce the dimensions
-> Dimensions
- Basketball - color + x_coordinate + y_coordinates - x1
- Player - color + x_coordinate + y_coordinates - x10
-> Algorithms
- PCA (For efficiency)
- t-SNE (For Visualization)
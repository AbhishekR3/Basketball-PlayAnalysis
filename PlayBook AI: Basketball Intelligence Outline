This is my idea outline for this project.
Some of these are things I read online and thought might be applicable.
I also use this as a document to note down things I need to research and general planning.

0.3.0
- AWS
--> Integrated into AWS Cloud Services with RDS and ECS
- Spatial Databases
--> Utilized spatial databases on Postgres to optimize calculating distances between players and basketball
--> Configured with spatial index, Quadtree, to enhance spatial queries
--> Designed with <90ms response time for proximity queries
--> Implemented while ensuring ACID properties compliance 
- Feature Engineering
--> Extrapolated and optimized features from raw dataset including temporal encoding
--> Performed PCA to reduce number of features by 63% while maintaining 91% explained variance ratio
- Docker
--> Integrated into Docker to help set up for scalability and multi-core processing


######################### Project Outline #########################
Create simulations of plays using Pygame
Example:
- Pass
- Hockey Pass
- Steal
- Screens
- Pick and roll
- Delay action

Object Detections 
- Need to convert to Image Segmentation?
- Built custom model on YOLOv10m

Object Tracking
- Create a mask of the basketball court image
- Deep Sort (helps considering occuluion)
- Validation Metrics: IDF1, MOTA, MOTP

Feature Engineering
- PCA
- Exponential Decay Temporal Encoding on TrackID
- Validation Metrics
-- Explained varaince
-- Cross-Validation

Spatial Databases
- ACID
--> Atomicity
---- Inserts entire data or forefits
---- Spatial indexing
--> Consistent
---- NOT NULL, Unique, Check
---- Spatial constraints
--> Isoluation
---- Locking mechanism for concurrent spatial operations
---- Spatial indexing
--> Durability
---- Commited spatial transactions persisted

- Spatial View 
---- Have a view of pre-calculated distances between all objects

- Spatial Indexing
---- QuadTrees
---- Cache included

- Error Handling
---- Data Integrity
---- Performance related
---- Data loading
---- Spatial Indexing

- Spatial Data Types
---- Point - Individual Points
---- Line String - Tracking

- Temporal Aspect 
---- Convert seconds to timestamp? Need to figure out how to optimally understand temporal aspect 

Neural Networks
- C3D
- LSTM 
- TCN

Transformers
- STN
- TimeSformer

Model Efficiency/Compression
- Quantization
- Pruning
- Efficient Interface? Research more
- Neural Network on every other frame or every 5 frames?
- Feature Reduction: PCA / anything else?
- Ensemble methods

Hyperparameter Tuning
- Adam optimizer
- Grid Search

Data Processing
- Parralel/Batch processing?
- Distributed processing
- GPU accelerated libraries
- Spatial Databases

Simulation Optimization
- Change video dimensions???
- Change video resolution to 240p?
- Consider switching to 60/higher FPS

GPU Accelerated Libraries
- MOT - CUDA, CuPy, Numba, PyCUDA, cuDF
- NN - Tensorflow, Keras

######################### Notes #########################
1. Deep Sort Paper
- Combinations of big/small objects doesnt work well. 
Think about making the objects closer in size? It has a scale threshold too

- Scale threshold (important) + reduction threshold

- Current frame-previous frame matching search takes the longest time to process
So you should reduce the dimensions
-> Dimensions
- Basketball - color + x_coordinate + y_coordinates - x1
- Player - color + x_coordinate + y_coordinates - x10
-> Algorithms
- PCA (For efficiency)
- t-SNE (For Visualization)